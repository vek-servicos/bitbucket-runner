#!/bin/bash

# discord_send.sh - Script para envio de notifica√ß√µes ao Discord
# Vers√£o: 2.0
# Melhorias implementadas:
# - Carregamento correto de depend√™ncias antes do trap
# - Fun√ß√£o gen√©rica de envio de mensagem
# - Tratamento de erros do Cloudflare
# - Informa√ß√µes do container no footer
# - Desativa√ß√£o de upload de arquivo e men√ß√µes

set -euo pipefail

# Ativar debug conforme solicitado
set -x

# CORRE√á√ÉO CR√çTICA: Carregar depend√™ncias ANTES do trap setup
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
source "${SCRIPT_DIR}/lib/common.sh"

# Agora configurar trap - as fun√ß√µes j√° est√£o dispon√≠veis
trap 'handle_script_error $? $LINENO' ERR

# Configura√ß√µes Discord
DISCORD_WEBHOOK_URL="${DISCORD_WEBHOOK_URL:-}"
CLOUDFLARE_API_TOKEN="${CLOUDFLARE_API_TOKEN:-}"
CLOUDFLARE_ZONE_ID="${CLOUDFLARE_ZONE_ID:-}"

# Fun√ß√£o para tratamento de erros do script
handle_script_error() {
    local exit_code=$1
    local line_number=$2
    
    log "ERROR" "Script falhou na linha $line_number com c√≥digo $exit_code"
    
    # Enviar notifica√ß√£o de erro cr√≠tico ao Discord
    send_error_notification "Falha cr√≠tica no script discord_send.sh" \
        "Linha: $line_number, C√≥digo: $exit_code"
}

# Fun√ß√£o gen√©rica para envio de mensagem ao Discord
# Par√¢metros: t√≠tulo, descri√ß√£o, cor (opcional), tipo (opcional)
send_discord_message() {
    local title="$1"
    local description="$2"
    local color="${3:-3447003}"  # Azul padr√£o
    local message_type="${4:-info}"
    
    if [[ -z "$DISCORD_WEBHOOK_URL" ]]; then
        log "WARN" "DISCORD_WEBHOOK_URL n√£o configurado"
        return 1
    fi
    
    # Obter informa√ß√µes do ambiente
    local build_number=$(get_build_number)
    local timestamp=$(get_timestamp)
    local container_info=$(get_container_info)
    
    # Construir payload JSON
    local payload=$(cat <<EOF
{
    "embeds": [{
        "title": "$title",
        "description": "$description",
        "color": $color,
        "footer": {
            "text": "#$build_number ‚Ä¢ Bitbucket ‚Ä¢ $timestamp $container_info"
        },
        "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)"
    }]
}
EOF
)
    
    # Enviar mensagem com retry
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "$DISCORD_WEBHOOK_URL" >/dev/null; then
            
            log "SUCCESS" "Mensagem enviada ao Discord: $title"
            return 0
        else
            ((retry_count++))
            log "WARN" "Tentativa $retry_count/$max_retries falhou"
            [[ $retry_count -lt $max_retries ]] && sleep 2
        fi
    done
    
    log "ERROR" "Falha ao enviar mensagem ao Discord ap√≥s $max_retries tentativas"
    return 1
}

# Fun√ß√£o espec√≠fica para notifica√ß√µes de erro
send_error_notification() {
    local error_title="$1"
    local error_details="$2"
    
    log "INFO" "Enviando notifica√ß√£o de erro: $error_title"
    
    # Cor vermelha para erros
    send_discord_message "‚ùå $error_title" "$error_details" "15158332" "error"
}

# Fun√ß√£o para verificar depend√™ncias
ensure_dependencies() {
    local missing_deps=()
    
    # Lista de depend√™ncias necess√°rias
    local required_commands=("curl" "jq")
    
    for cmd in "${required_commands[@]}"; do
        if ! command_exists "$cmd"; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log "WARN" "Depend√™ncias ausentes: ${missing_deps[*]}"
        
        # Tentar instalar depend√™ncias baseado no sistema
        if command_exists "apt-get"; then
            log "INFO" "Instalando depend√™ncias via apt-get..."
            apt-get update -qq && apt-get install -y "${missing_deps[@]}"
        elif command_exists "yum"; then
            log "INFO" "Instalando depend√™ncias via yum..."
            yum install -y "${missing_deps[@]}"
        elif command_exists "apk"; then
            log "INFO" "Instalando depend√™ncias via apk..."
            apk add --no-cache "${missing_deps[@]}"
        else
            log "ERROR" "N√£o foi poss√≠vel instalar depend√™ncias automaticamente"
            return 1
        fi
    fi
}

# Fun√ß√£o para teste de conectividade com Cloudflare
test_cloudflare_connectivity() {
    if [[ -z "$CLOUDFLARE_API_TOKEN" ]] || [[ -z "$CLOUDFLARE_ZONE_ID" ]]; then
        log "WARN" "Credenciais do Cloudflare n√£o configuradas"
        return 0
    fi
    
    log "INFO" "Testando conectividade com Cloudflare..."
    
    local response
    response=$(curl -s -w "%{http_code}" \
        -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
        -H "Content-Type: application/json" \
        "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID" \
        -o /dev/null)
    
    if [[ "$response" != "200" ]]; then
        local error_msg="Falha na comunica√ß√£o com Cloudflare API (HTTP: $response)"
        log "ERROR" "$error_msg"
        
        # IMPLEMENTA√á√ÉO CR√çTICA: Notificar erro do Cloudflare via Discord
        send_error_notification "Cloudflare API Error" "$error_msg"
        return 1
    fi
    
    log "SUCCESS" "Conectividade com Cloudflare OK"
    return 0
}

# Fun√ß√£o para envio de notifica√ß√£o de pipeline
send_pipeline_notification() {
    local pipeline_status="$1"
    local pipeline_title="${2:-Pipeline Notification}"
    
    case "$pipeline_status" in
        "success")
            send_discord_message "‚úÖ $pipeline_title" "Pipeline executado com sucesso" "3066993"
            ;;
        "failure")
            send_discord_message "‚ùå $pipeline_title" "Pipeline falhou" "15158332"
            ;;
        "running")
            send_discord_message "üöÄ $pipeline_title" "Pipeline em execu√ß√£o" "16776960"
            ;;
        *)
            send_discord_message "‚ÑπÔ∏è $pipeline_title" "Status: $pipeline_status" "3447003"
            ;;
    esac
}

# Fun√ß√£o de ajuda
show_help() {
    cat <<EOF
Uso: $0 [OP√á√ïES]

OP√á√ïES:
    pipeline-notify STATUS TITLE    Enviar notifica√ß√£o de pipeline
    error-notify TITLE DETAILS      Enviar notifica√ß√£o de erro
    test-cloudflare                 Testar conectividade com Cloudflare
    --help                          Mostrar esta ajuda

EXEMPLOS:
    $0 pipeline-notify success "Deploy Production"
    $0 error-notify "Build Failed" "Compilation error in module X"
    $0 test-cloudflare

VARI√ÅVEIS DE AMBIENTE:
    DISCORD_WEBHOOK_URL     URL do webhook do Discord (obrigat√≥rio)
    CLOUDFLARE_API_TOKEN    Token da API do Cloudflare (opcional)
    CLOUDFLARE_ZONE_ID      ID da zona do Cloudflare (opcional)
EOF
}

# Fun√ß√£o principal
main() {
    log "INFO" "Iniciando discord_send.sh v2.0"
    
    # Verificar depend√™ncias
    ensure_dependencies
    
    # Processar argumentos
    case "${1:-}" in
        "pipeline-notify")
            [[ $# -lt 3 ]] && { log "ERROR" "Argumentos insuficientes"; show_help; exit 1; }
            send_pipeline_notification "$2" "$3"
            ;;
        "error-notify")
            [[ $# -lt 3 ]] && { log "ERROR" "Argumentos insuficientes"; show_help; exit 1; }
            send_error_notification "$2" "$3"
            ;;
        "test-cloudflare")
            test_cloudflare_connectivity
            ;;
        "--help"|"-h"|"")
            show_help
            ;;
        *)
            log "ERROR" "Op√ß√£o inv√°lida: $1"
            show_help
            exit 1
            ;;
    esac
    
    log "SUCCESS" "discord_send.sh executado com sucesso"
}

# Executar fun√ß√£o principal se script for chamado diretamente
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi